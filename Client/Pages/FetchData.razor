@page "/fetchdata"
@attribute [Authorize]
@inject IWeatherForecastApi bizApi

<PageTitle>Weather forecast</PageTitle>

<MudContainer>
  <MudText Typo=Typo.h3>Weather forecast</MudText>

  <MudText Typo=Typo.body1>This component demonstrates fetching data from the server.</MudText>

  <MudButton Variant=Variant.Filled Color=Color.Primary OnClick=HandleQuery>刷新</MudButton>
  <MudButton Variant=Variant.Filled Color=Color.Error OnClick=@(()=>{
             throw new Exception("測試例外！");
             })>測試例外！</MudButton>

  @if (f_loading)
  {
    <MudProgressLinear Color=Color.Info Class="my-1" Indeterminate />
  }

  @if(errMsg != null)
  {
    <MudAlert Severity=Severity.Error>
      @errMsg
    </MudAlert>
  }

  @if (dataList != null)
  {
    <MudSimpleTable>
      <thead>
        <tr>
          <th>Date</th>
          <th>Temp. (C)</th>
          <th>Temp. (F)</th>
          <th>Summary</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var item in dataList)
        {
          <tr>
            <td>@item.Date.ToShortDateString()</td>
            <td>@item.TemperatureC</td>
            <td>@item.TemperatureF</td>
            <td>@item.Summary</td>
          </tr>
        }
      </tbody>
    </MudSimpleTable>
  }

</MudContainer>

@code {
  List<WeatherForecast>? dataList;
  bool f_loading = false;
  string? errMsg = null;

  protected override async Task OnInitializedAsync()
  {
    await HandleQuery();
  }

  async Task HandleQuery()
  {
    try
    {
      errMsg = null;
      f_loading = true;

      dataList = await bizApi.WeatherForecastAsync();
      //forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
    }
    catch(Exception ex)
    {
      errMsg = ex.Message;
    }
    finally
    {
      f_loading = false;
    }
  }
}
