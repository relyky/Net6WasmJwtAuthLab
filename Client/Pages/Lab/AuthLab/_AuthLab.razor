@using System.Net;
@page "/auth"
@inject IdentityApi bizApi
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<PageTitle>Auth lab</PageTitle>

<MudContainer>

  <MudCheckBox @bind-Checked=@isAdmin Color=Color.Warning>系統管理員</MudCheckBox>
  <MudButton Variant=Variant.Filled Color=Color.Primary OnClick=HandleGenerateToken>Generate token</MudButton>

  @if(f_loading)
  {
    <MudProgressLinear Color=Color.Info Indeterminate />
  }

  @if (!String.IsNullOrWhiteSpace(errMsg))
  {
    <MudAlert Severity=Severity.Error>
      @errMsg
    </MudAlert>
  }

  <pre style="white-space:pre-line; overflow-wrap:break-word;">
    @token
  </pre>
</MudContainer>

@code {
  string? token = null;
  bool f_loading = false;
  string errMsg = string.Empty;
  bool isAdmin = false;

  Task HandleGenerateToken() => CatchHandling(async Task () =>
  {
    var request = new TokenGenerationRequest
      {
        UserId = new Guid("12345678-1234-1234-1234-123456789012"),
        Email = "nobody@mail.server",
        CustomClaims = new(new KeyValuePair<string, string>[]
      {
            new("admin", isAdmin ? "true" : "false")
          })
      };

    token = await bizApi.GenerateTokenAsync(request);
    await sessionStorage.SetItemAsync("token", token);
  });

  async Task CatchHandling(Func<Task> action)
  {
    try
    {
      f_loading = true;
      errMsg = string.Empty;
      await action();
    }
    catch (ApiException ex)
    {
      if (ex.StatusCode == HttpStatusCode.BadRequest)
      {
        var msg = await ex.GetContentAsAsync<ErrMsg>();
        errMsg = $"ApiException: {msg.Severity}-{msg.Message}";
      }
      else
      {
        errMsg = $"ApiException: {ex.Message}";
      }
    }
    catch (Exception ex)
    {
      errMsg = "EXCEPTION: " + ex.Message;
    }
    finally
    {
      f_loading = false;
    }
  }
}
