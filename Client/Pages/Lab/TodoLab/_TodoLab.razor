@page "/todo"
@using System.Net;
@inject ITodoApi bizApi

<PageTitle>Counter</PageTitle>

<MudContainer>
  <MudText Typo=Typo.h3 GutterBottom>Todo list</MudText>

  <MudToolBar>
    <MudButton Variant=Variant.Filled Color=Color.Primary OnClick=HandleQuery>刷新</MudButton>
    <MudCheckBox @bind-Checked=f_testFail Color=Color.Warning>測試邏輯失敗</MudCheckBox>
  </MudToolBar>

  @if (!String.IsNullOrWhiteSpace(errMsg))
  {
    <MudAlert Severity=Severity.Error>
      @errMsg
    </MudAlert>
  }

  <MudTable Items=dataList Hover Striped Loading=@f_loading LoadingProgressColor=Color.Info>
    <ToolBarContent>
      <MudTextField @bind-Value=newTodoDesc Placeholder="工作內容描述"
                    Variant=Variant.Outlined Margin=Margin.Dense FullWidth=true
                    Adornment=Adornment.Start AdornmentIcon=@Icons.Material.Filled.TextFormat />
      <MudButton Variant=Variant.Filled Color=Color.Primary Class="ml-2" OnClick=HandleAdd>新增</MudButton>
    </ToolBarContent>
    <HeaderContent>
      <MudTh>Sn</MudTh>
      <MudTh>Description</MudTh>
      <MudTh>Done</MudTh>
      <MudTh>CreateDtm</MudTh>
    </HeaderContent>
    <RowTemplate>
      <MudTd DataLabel="Sn">@context.Sn</MudTd>
      <MudTd DataLabel="Description">@context.Description</MudTd>
      <MudTd DataLabel="Done">@context.Done</MudTd>
      <MudTd DataLabel="CreateDtm">@context.CreateDtm</MudTd>
    </RowTemplate>
  </MudTable>
  </MudContainer>

  @code {
  List<TodoDto> dataList = new();
  bool f_loading = false;
  bool f_testFail = false;
  string errMsg = string.Empty;
  string newTodoDesc = string.Empty;

  //protected override async Task OnInitializedAsync()
  //{
  //  await base.OnInitializedAsync();
  //  await HandleQuery();
  //}

  Task HandleQuery() => CatchHandling(async () =>
  {
    await Task.Delay(500);

    var qryArgs = new TodoQryAgs
      {
        Msg = f_testFail ? "測試邏輯失敗" : "今天天氣真好",
        Amt = 999
      };

    dataList = await bizApi.QryDataListAsync(qryArgs);
  });

  Task HandleAdd() => CatchHandling(async () =>
  {
    var newTodo = await bizApi.AddFormDataAsync(newTodoDesc);

    // Success
    dataList.Add(newTodo);
    newTodoDesc = string.Empty;
  });

  //# AOP with Decorator
  async Task CatchHandling(Func<Task> action)
  {
    try
    {
      f_loading = true;
      errMsg = string.Empty;
      await action();
    }
    catch (ApiException ex)
    {
      if (ex.StatusCode == HttpStatusCode.BadRequest)
      {
        var msg = await ex.GetContentAsAsync<ErrMsg>();
        errMsg = $"ApiException: {msg.Severity}-{msg.Message}";
      }
      else
      {
        errMsg = $"ApiException: {ex.Message}";
      }
    }
    catch (Exception ex)
    {
      errMsg = "EXCEPTION: " + ex.Message;
    }
    finally
    {
      f_loading = false;
    }
  }

  //async Task HandleQuery_old()
  //{
  //  try
  //  {
  //    f_loading = true;
  //    errMsg = string.Empty;
  //
  //    await Task.Delay(500);
  //
  //    var qryArgs = new TodoQryAgs
  //      {
  //        Msg = f_testFail ? "測試邏輯失敗" : "今天天氣真好",
  //        Amt = 999
  //      };
  //
  //    dataList = await bizApi.QryDataListAsync(qryArgs);
  //  }
  //  catch (ApiException ex)
  //  {
  //    if (ex.StatusCode == HttpStatusCode.BadRequest)
  //    {
  //      var msg = await ex.GetContentAsAsync<ErrMsg>();
  //      errMsg = $"ApiException: {msg.Severity}-{msg.Message}";
  //    }
  //    else
  //    {
  //      errMsg = $"ApiException: {ex.Message}";
  //    }
  //  }
  //  catch (Exception ex)
  //  {
  //    errMsg = "EXCEPTION: " + ex.Message;
  //  }
  //  finally
  //  {
  //    f_loading = false;
  //  }
  //}

  //async Task HandleAdd_old()
  //{
  //  try
  //  {
  //    f_loading = true;
  //    errMsg = string.Empty;
  //
  //    var newTodo = await bizApi.AddFormDataAsync(newTodoDesc);
  //
  //    // Success
  //    dataList.Add(newTodo);
  //    newTodoDesc = string.Empty;
  //  }
  //  catch (ApiException ex)
  //  {
  //    if (ex.StatusCode == HttpStatusCode.BadRequest)
  //    {
  //      var msg = await ex.GetContentAsAsync<ErrMsg>();
  //      errMsg = $"ApiException: {msg.Severity}-{msg.Message}";
  //    }
  //    else
  //    {
  //      errMsg = $"ApiException: {ex.Message}";
  //    }
  //  }
  //  catch (Exception ex)
  //  {
  //    errMsg = "EXCEPTION: " + ex.Message;
  //  }
  //  finally
  //  {
  //    f_loading = false;
  //  }
  //}
}
